" BASIC SECTION
set showmode
set showcmd
set showmatch
set nofixendofline
set encoding=utf-8
set noswapfile
set hlsearch
set incsearch
set ruler
set number
set spell spelllang=en_us
set tabstop=4
set shiftwidth=4
set expandtab
set cursorline
set history=1000
filetype plugin indent on
filetype plugin on
syntax on
:colorscheme molokai
hi Normal guibg=NONE ctermbg=NONE
set autoread
set completeopt=longest,menu
set laststatus=2
set nocompatible

autocmd BufWritePost $MYVIMRC source $MYVIMRC

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"    Plug 'junegunn/vim-easy-align'
"    Plug 'skywind3000/quickmenu.vim'
"    Plug 'jiangmiao/auto-pairs'
"    Plug 'universal-ctags/ctags'
"    Plug 'mhinz/vim-startify'
"    Plug 'SirVer/ultisnips'
"    Plug 'honza/vim-snippets'
"    Plug 'https://github.com/junegunn/vim-github-dashboard.git'
"    Plug 'https://github.com/ludovicchabant/vim-gutentags.git'
    Plug 'preservim/nerdtree'
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"    Plug 'tpope/vim-fireplace'
"    Plug 'rdnetto/YCM-Generator'
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

"" ============================== VIM-GUTENTAGS
"" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"" 所生成的数据文件的名称
"let g:gutentags_ctags_tagfile = '.tags'
"" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
"let s:vim_tags = expand('~/.cache/tags')
"let g:gutentags_cache_dir = s:vim_tags
"" 配置 ctags 的参数
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"" 检测 ~/.cache/tags 不存在就新建
"if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
"endif
"if !executable('ctags')
"    let g:gutentags_dont_load = 1
"endif
"set statusline+=%{gutentags#statusline()}
"" ============================== DONE VIM-GUTENTAGS
"
"" ============================== NERDTREE
map <C-n> :NERDTreeToggle<CR>
"autocmd StdinReadPre * let s:std_in=1   " 当不带参数打开Vim时自动加载项目树
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"let NERDTreeIgnore=['\.pyc$', '\~$', 'node_modules']
"let NERDTreeMinimalUI=1
"let NERDTreeAutoCenter=1
""在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
"autocmd VimEnter * NERDTree
"" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）
"" let NERDTreeWinPos="left"
"" 当打开 NERDTree 窗口时，自动显示 Bookmarks
"let NERDTreeShowBookmarks=1
"let g:NERDTreeShowHidden = 1             "显示隐藏文件
""默认打开定位至编辑区
"wincmd w
"autocmd VimEnter * wincmd w
"autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"" 光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l
"" ============================== DONE
"
"" ============================== ULTUSNIPS
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"" ============================== DONE

" =============================== For auto-pairs
